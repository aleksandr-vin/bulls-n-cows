{"version":3,"sources":["AnswersList.js","App.js","reportWebVitals.js","index.js"],"names":["AnswersList","this","props","items","length","map","item","text","result","id","React","Component","App","state","number","getNumber","message","handleChange","bind","handleSubmit","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","slice","join","className","onSubmit","htmlFor","autoFocus","type","min","max","minLength","maxLength","pattern","size","placeholder","required","onChange","value","e","setState","target","preventDefault","match","getUniqueDigitsCount","newItem","Date","now","getGuessResult","concat","console","log","guess","gs","split","Set","reduce","a","b","toString","s","head","bulls","getExistingDigits","getBulls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f19a4c6f.chunk.js","sourcesContent":["import React from 'react';\n\nclass AnswersList extends React.Component {\n  render() {\n    if (this.props.items && this.props.items.length > 0) {\n      return (\n        <div>\n          <h3>Answers</h3>\n          <ul>\n            {this.props.items.map(item => (\n              <li key={item.id}>{item.text} : {item.result}</li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <div />\n      );\n    }\n  }\n}\n\nexport default AnswersList;\n","import './App.css';\nimport React from 'react';\nimport AnswersList from './AnswersList';\n\n\nclass App extends React.Component {\n\n  getNumber() {\n    const shuffle = (array) => {\n      // Credits go to https://stackoverflow.com/a/2450976\n      var currentIndex = array.length, temporaryValue, randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n    return shuffle([0,1,2,3,4,5,6,7,8,9]).slice(0, 4).join('');\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      text: '',\n      number: this.getNumber(),\n      message: 'I have a secret number.'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AnswersList items={this.state.items} />\n          <h4>{this.state.message}</h4>\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"new-guess\">\n              Your guess?\n            </label>\n            <input\n              id=\"new-guess\"\n              autoFocus={true}\n              type=\"number\"\n              min=\"0000\"\n              max=\"9999\"\n              minLength=\"4\"\n              maxLength=\"4\"\n              pattern=\"^\\d{4}$\"\n              size=\"4\"\n              placeholder={\"\\u2219\\u2219\\u2219\\u2219\"}\n              required={true}\n              onChange={this.handleChange}\n              value={this.state.text}\n            />\n            <button className=\"App-button\">\n              Check #{this.state.items.length + 1}\n            </button>\n          </form>\n        </header>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.match(/^\\d{4}$/)) {\n      return;\n    }\n    if (this.getUniqueDigitsCount(this.state.text) !== 4) {\n      this.setState(state => ({\n        message: 'No duplicates, please!'\n      }));\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now(),\n      result: this.getGuessResult(this.state.number, this.state.text)\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: '',\n      message: null\n    }));\n    console.log('Number:', this.state.number, newItem);\n  }\n\n  getUniqueDigitsCount(guess) {\n    let gs = guess.split('')\n    return [...new Set(gs)].length\n  }\n\n  getExistingDigits(number, guess) {\n    let gs = guess.split('');\n    return [ ...new Set(gs)].reduce((a,b) => {\n      if (number.match(b.toString())) {\n        return a + 1;\n      } else {\n        return a;\n      }\n    }, 0);\n  }\n\n  getBulls(number, guess) {\n    return guess.split('').reduce((a,b) => {\n      const [head, ...tail] = a.s;\n      return {s: tail, bulls: a.bulls + ((b === head) ? 1 : 0)};\n    }, {s: number.split(''), bulls: 0}).bulls;\n  }\n\n  getGuessResult(number, guess) {\n    return '' + this.getExistingDigits(number, guess) + '-' + this.getBulls(number, guess);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}